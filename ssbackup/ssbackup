#!/usr/bin/python3
#
# ssbackup -  a tool for making snapshot-style backups using rsync
#
# Copyright (C) 2007 M G Berberich
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 USA.
#

import sys
import os
import subprocess
import tempfile
import optparse
import re

###########################################################################
#
# backup-routines
#

class BackupError(Exception):
    pass

#
# call a command and raise a backup-exception if it fails
#
def callcommand(args):
    try:
        r = subprocess.call(args)
        return r
    except OSError as data:
        raise BackupError("call", (args[0], data[1]))

#
#
#
def rename(a, b):
    try:
        os.rename(a, b)
    except OSError as data:
        raise BackupError("mv", (a, b, data[1]))

#
# do rsync-logic
#
def do_backup(source, name, count, exclude, verbose):
    # do the rsync, make hardlinktree if possible
    if exclude:
        commandstr = ["/usr/bin/rsync",  "--archive", "--acls",
                      "--exclude-from={:s}".format(exclude),
                      "--link-dest=../{:s}.0/".format(name),
                      "{:s}/".format(source), name]
    else:
        commandstr = ["/usr/bin/rsync",  "--archive", "--acls",
                      "--link-dest=../{:s}.0/".format(name),
                      "{:s}/".format(source), name]

    r = callcommand(commandstr)

    #  0: O.K.
    # 24: Partial transfer due to vanished source files
    if r not in (0, 24):
        raise BackupError("rsync", r)

    # remove oldest version
    name_old = "{:s}.{:d}".format(name, count)
    if os.path.exists(name_old):
        r = callcommand(["/bin/rm",  "--recursive", "--force", name_old])
        if r != 0:
            raise BackupError("rm", (name_old, r))

    # shift old versions
    for i in range(count - 1, -1, -1):
        name_i = "{:s}.{:d}".format(name, i)
        if os.path.exists(name_i):
            name_i1 = "{:s}.{:d}".format(name, i+1)
            rename(name_i, name_i1)

    # rename new backup to .0
    rename(name, "{:s}.0".format(name))

    # touch directory to have a timestamp
    os.utime("{:s}.0".format(name), None)

#
# split source-'url' into type and path
#
def split_url(url):
    g = re.match("([a-zA-Z]+)://(.+)", url)
    if not g:
        raise BackupError("noturl", url)
    (type, path) = g.groups()
    if type not in ("file", "nfs"):
        raise BackupError("wrongtype", type)
    return (type, path)

#
# do the backup
#
def backup(source, name, dir, count, exclude, checkonly, verbose):
    (type, path) = split_url(source)
    if verbose:
        print("backup: type={:s}, path={:s}, "
              "name={:s}, dir={:s}, count={:d}".format(
                  type, path, name, dir, count))

    try:
        os.chdir(dir)
    except OSError as data:
        raise BackupError("nodir", (dir, data[1]))

    if checkonly:
        print_plan(source, name, dir, count, exclude)
        return

    if type == "file":
        if path[0] != '/':
            raise BackupError("noabspath", path)
        do_backup(path, name, count, exclude, verbose)
    elif type == "nfs":
        mountpoint = tempfile.mkdtemp(
            "",
            "{:s}/ssbackup-mount-{:s}-".format(dir, name))

        r = callcommand(["/bin/mount", "-t", "nfs", "-o", "ro",
                         path, mountpoint])
        if r != 0:
            raise BackupError("mount", path)

        try:
            do_backup(mountpoint, name, count, exclude, verbose)
        finally:
            r = callcommand(["/bin/umount",  mountpoint])
            if r != 0:
                raise BackupError("umount", mountpoint)
            os.rmdir(mountpoint)
    else:
        raise BackupError("type", source)

###########################################################################
#
# command-interface
#

#
# report error
#
def print_error(s):
    print("ssbackup error: {:s}".format(s), file=sys.stderr)
    sys.exit(1)

#
# call backup and catch exceptions
#
def call_backup(source, name, dir, count, exclude, checkonly, verbose):
    try:
        backup(source, name, dir, count, exclude, checkonly, verbose)

    except BackupError as data:
        if data[0] == "mount":
            print_error("mount of %s failed" % data[1])
        elif data[0] == "umount":
            print_error("unmount of %s failed" % data[1])
        elif data[0] == "type":
            print_error("type of %s is not known" % data[1])
        elif data[0] == "call":
            print_error("calling '%s' failed with %s" % data[1])
        elif data[0] == "rsync":
            print_error("rsync failed with code %s" % data[1])
        elif data[0] == "mv":
            print_error("renaming '%s' to '%s' failed with %s" % data[1])
        elif data[0] == "rm":
            print_error("removing '%s' failed with %s" % data[1])
        elif data[0] == "noturl":
            print_error("%s is not a valid source" % data[1])
        elif data[0] == "wrongtype":
            print_error("%s is not a valid type" % data[1])
        elif data[0] == "nodir":
            print_error("change to directory '%s' failed with: %s" % data[1])
        elif data[0] == "noabspath":
            print_error("'%s' is not a absolut path" % data[1])
        else:
            print_error("unknown error: %s" % data)

    except OSError as data:
        print_error("System-error:", data[1])

#
# print a backup-plan-description
#
def print_plan(source, dest, dir, count, exclude):
    print("backing up", source)
    print("    to {:s}/{:s}.*".format(dir, dest))
    if exclude:
        print("    using exclude-file {:s}".format(exclude))
    print("    holding {:d} versions".format(count))

###########################################################################
#
# Main-Programm
#
description = "This tool makes snapshot-style backups"

usage = """usage: %prog [options] source name

source is file://[absolut-path] or nfs://[server]:[path]"""

optparse = optparse.OptionParser(version = "1.0",
                                 usage = usage,
                                 description = description)
optparse.add_option("-v", "--verbose", action = "store_true",
                    dest = "verbose", default = False,
                    help="verbose output ")
optparse.add_option("-d", "--basedir", type="string",
                 dest = "basedir", default = ".",
                 help="Directory that holds the backups. "
                 "default is the current directory")

optparse.add_option("-e", "--exclude", type="string",
                 dest = "exclude", default = None,
                 help="file with rsync-exclude patterns ")

optparse.add_option("-n", "--count", type="int", dest = "count", default = 14,
                 help="Number of backup-snapshots that are held")

optparse.add_option("-o", "--check-only", action = "store_true",
                 dest = "checkonly", default = False,
                 help="do nothing, only say what would have been done")
options, args = optparse.parse_args()

if len(args) == 2:
    if not len(args[1]):
        print_error("name must not be an empty string")

    call_backup(args[0], args[1], options.basedir, options.count,
                options.exclude, options.checkonly, options.verbose)
else:
    optparse.error("wrong number of arguments")
